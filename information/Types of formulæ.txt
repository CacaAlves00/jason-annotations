Actions
    ğŸ‘‰ is a predicate
    ğŸ‘‰ e.g., rotate(left_arm,45)
    ğŸ‘‰ e.g., rotate_right_arm(90)
    ğŸ‘‰ e.g., call(john)
    ğŸ‘‰ blocks the execution of the plan until its completion
    ğŸ‘‰ we need to be sure that any variables used in the action become instantiated 
       before the action is executed 

Achievement goals
    ğŸ‘‰ blocks the execution until the goal is achieved
    ğŸ‘‰ using the '!!' operator prevents the goal to block the execution
    ğŸ‘‰ is be added to the current goals by prefixing the literal with the '!' operator
    ğŸ‘‰ e.g., !happy(customer)
    ğŸ‘‰ e.g., !~leaking(gas)

Test goals
    ğŸ‘‰ denoted by the '?' operator
    ğŸ‘‰ used to retrieve information that is available in the agentâ€™s belief base
    ğŸ‘‰ ?bank_balance(BB) 
        ğŸ‘† will instantiate the logical variable BB to the BELIEVED 
           bank balance
    ğŸ‘‰ e.g., ?coords(Target,X,Y) ğŸ‘ˆ Target is already bound and X and Y are free
    ğŸ‘‰ if the test goal fails (i.e., the belief is not in the belief base), 
       the WHOLE plan fails
            ğŸ‘† mechanism for handling plan failure will then be called upon, i.e.,
               be careful with test goals

Mental notes
    ğŸ‘‰ self reminder (sort of a mental note) 
    ğŸ‘‰ a promise/commitment
    ğŸ‘‰ or an interrupted task that may need to be resumed later
    ğŸ‘‰ e.g., [source(self)]

Internal actions
    ğŸ‘‰ Jason's standard internal actions
        ğŸ‘† a standard internal action is denoted by an empty library name
        ğŸ‘† i.e., it has a '.' as its preffix
        ğŸ‘† e.g., .send ğŸ‘ˆ used for inter-agent communication
    ğŸ‘‰ programmers are able to create internal actions

Expressions